{% extends 'base.html.twig' %}

{% block title %}API Scraper & Uploader{% endblock %}

{% block body %}
    <div class="container mt-5">
        <div class="example-wrapper">
            <h1 class="display-4">API Scraper & Uploader</h1>

            <button id="scrape-youtube" class="btn btn-success mt-3">Scraper les vidéos YouTube</button>
            <button id="import-videos" class="btn btn-primary mt-3">Importer les vidéos dans la base de données</button>

            <div id="progress-section" style="display:none;" class="mt-3">
                <h3>Progression du téléchargement :</h3>
                <div class="progress">
                    <div id="progress-bar" class="progress-bar progress-bar-striped progress-bar-animated" role="progressbar" style="width: 0%;" aria-valuenow="0" aria-valuemin="0" aria-valuemax="100"></div>
                </div>
                <ul id="download-progress" class="mt-3"></ul>
            </div>

            <div id="result-card" class="card mt-3" style="display:none;">
                <div class="card-body">
                    <h5 class="card-title">Résultat</h5>
                    <pre id="json-result"></pre>
                </div>
            </div>
        </div>
    </div>

    <script>
        document.addEventListener('DOMContentLoaded', function() {
            const scrapeButton = document.getElementById('scrape-youtube');
            const importButton = document.getElementById('import-videos');
            const progressSection = document.getElementById('progress-section');
            const progressBar = document.getElementById('progress-bar');
            const progressList = document.getElementById('download-progress');
            const resultCard = document.getElementById('result-card');
            const jsonResult = document.getElementById('json-result');

            // Vérifier si le fichier JSON existe
            fetch('/api/data/all_json_code.json')
                .then(response => {
                    if (response.ok) {
                        return response.json();
                    } else {
                        throw new Error('Le fichier JSON n\'existe pas.');
                    }
                })
                .then(data => {
                    // Afficher le fichier JSON existant
                    resultCard.style.display = 'block';
                    jsonResult.textContent = JSON.stringify(data, null, 4);

                    // Masquer la barre de progression et les erreurs
                    progressSection.style.display = 'none';
                })
                .catch(error => {
                    console.log('Aucun fichier JSON existant trouvé.');
                });

            scrapeButton.addEventListener('click', function() {
                console.log('Bouton cliqué, démarrage du scraping');

                progressSection.style.display = 'block';
                progressBar.style.width = '0%';
                progressBar.setAttribute('aria-valuenow', 0);
                progressList.innerHTML = '<li>Début du scraping...</li>';
                resultCard.style.display = 'none';
                jsonResult.textContent = '';

                fetch('{{ path('app_api_youtube_scrape') }}', {
                    method: 'POST',
                })
                    .then(response => response.body)
                    .then(rb => {
                        const reader = rb.getReader();
                        return new ReadableStream({
                            start(controller) {
                                return pump();
                                function pump() {
                                    return reader.read().then(({ done, value }) => {
                                        if (done) {
                                            controller.close();
                                            return;
                                        }
                                        const text = new TextDecoder("utf-8").decode(value);
                                        console.log('Received chunk', text);

                                        if (text.includes("PROGRESS:")) {
                                            const progressMatch = text.match(/PROGRESS: (\d+)%/);
                                            if (progressMatch) {
                                                const progress = parseInt(progressMatch[1]);
                                                progressBar.style.width = progress + '%';
                                                progressBar.setAttribute('aria-valuenow', progress);
                                            }
                                        }

                                        if (text.includes("SUCCESS:")) {
                                            progressBar.style.width = '100%';
                                            progressBar.setAttribute('aria-valuenow', 100);
                                            progressList.innerHTML += '<li><strong>Scraping terminé avec succès!</strong></li>';

                                            // Masquer les erreurs, la barre de progression et le texte "Progression du téléchargement :"
                                            progressSection.style.display = 'none';

                                            resultCard.style.display = 'block';
                                            fetch('/api/data/all_json_code.json')
                                                .then(response => response.json())
                                                .then(data => {
                                                    jsonResult.textContent = JSON.stringify(data, null, 4);
                                                });
                                        }

                                        if (text.includes("ERROR:")) {
                                            progressList.innerHTML += `<li>Erreur: ${text}</li>`;
                                        }

                                        controller.enqueue(value);
                                        return pump();
                                    });
                                }
                            }
                        });
                    })
                    .then(stream => new Response(stream))
                    .then(response => response.text())
                    .catch(error => {
                        console.error('Erreur lors de l\'appel à l\'API', error);
                        progressList.innerHTML += `<li>Erreur: ${error.message}</li>`;
                    });
            });

            importButton.addEventListener('click', function() {
                console.log('Bouton cliqué, démarrage de l\'importation des vidéos');

                fetch('{{ path('app_api_youtube_import') }}', {
                    method: 'POST',
                })
                    .then(response => response.json())
                    .then(data => {
                        if (data.success) {
                            alert('Importation réussie : ' + data.success);
                        } else if (data.error) {
                            alert('Erreur lors de l\'importation : ' + data.error);
                        }
                    })
                    .catch(error => {
                        console.error('Erreur lors de l\'appel à l\'API', error);
                        alert('Erreur lors de l\'importation des vidéos');
                    });
            });
        });
    </script>
{% endblock %}
